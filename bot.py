import os
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ChatType

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
HF_TOKEN = os.environ["HF_TOKEN"]

HF_API_URL = "https://api-inference.huggingface.co/models/Qwen/Qwen3-32B"

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def ask_qwen(prompt: str, max_new_tokens: int = 1024) -> str:
    headers = {"Authorization": f"Bearer {HF_TOKEN}"}
    payload = {
        "inputs": prompt,
        "parameters": {
            "max_new_tokens": max_new_tokens,
            "temperature": 0.3,
            "repetition_penalty": 1.1
        }
    }
    try:
        response = requests.post(HF_API_URL, headers=headers, json=payload, timeout=60)
        if response.status_code == 200:
            result = response.json()
            if isinstance(result, list) and len(result) > 0:
                return result[0].get("generated_text", "").strip()
        return f"–û—à–∏–±–∫–∞ HF API: {response.status_code} ‚Äî {response.text[:200]}"
    except Exception as e:
        return f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"

async def fetch_chat_history(chat_id: int, limit: int = 500) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ `limit` —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    messages = []
    offset = 0
    collected = 0

    while collected < limit:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—á–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞–∫—Å. 100 –∑–∞ —Ä–∞–∑)
            history = await bot.get_chat_history(chat_id, limit=100, offset=offset)
            if not history.messages:
                break

            for msg in history.messages:
                if msg.from_user and not msg.from_user.is_bot and msg.text:
                    messages.append(f"[{msg.from_user.first_name}]: {msg.text}")
                    collected += 1
                    if collected >= limit:
                        break

            offset += 100
            await asyncio.sleep(0.5)  # —É–≤–∞–∂–∞–µ–º –ª–∏–º–∏—Ç—ã Telegram API

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            break

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    return "\n".join(reversed(messages[-limit:]))

# === –ö–û–ú–ê–ù–î–´ ===

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.reply(
        "üß† –Ø ‚Äî Qwen-–ø–∞—Ä—Ç–Ω—ë—Ä –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/analyze_game ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç–æ–ª–∫–∏\n"
        "/qwen <–≤–æ–ø—Ä–æ—Å> ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é"
    )

@dp.message_handler(commands=["qwen"])
async def handle_qwen(message: types.Message):
    user_text = message.get_args()
    if not user_text:
        await message.reply("üí¨ –ò—Å–ø–æ–ª—å–∑—É–π: /qwen –ö–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω Observer?")
        return
    thinking = await message.reply("üß† –î—É–º–∞—é...")
    answer = await ask_qwen(user_text)
    await thinking.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
    for i in range(0, len(answer), 4000):
        await message.reply(answer[i:i+4000])

@dp.message_handler(commands=["analyze_game"])
async def analyze_game(message: types.Message):
    if message.chat.type == ChatType.PRIVATE:
        await message.reply("‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ, –≥–¥–µ —è –∞–¥–º–∏–Ω!")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –∞–¥–º–∏–Ω –ª–∏ –±–æ—Ç (–∏–Ω–∞—á–µ get_chat_history –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
    try:
        chat_member = await bot.get_chat_member(message.chat.id, (await bot.me).id)
        if chat_member.status not in ["administrator", "creator"]:
            await message.reply("‚ö†Ô∏è –Ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞!")
            return
    except:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞. –°–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º!")
        return

    thinking = await message.reply("üîç –°–æ–±–∏—Ä–∞—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–æ–æ–±—â–µ–Ω–∏–π)...")
    
    try:
        history = await fetch_chat_history(message.chat.id, limit=500)
        if not history.strip():
            await thinking.edit_text("üì≠ –í —á–∞—Ç–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        await thinking.edit_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç–æ–ª–∫–∏... (Qwen-32B, ~30 —Å–µ–∫)")

        prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–º –∏–≥—Ä–∞–º. –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ "
            "—Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä—ã. –í–∫–ª—é—á–∏:\n"
            "- –ù–∞–∑–≤–∞–Ω–∏–µ (–ø—Ä–∏–¥—É–º–∞–π, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)\n"
            "- –¶–µ–ª—å –∏–≥—Ä—ã\n"
            "- –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞\n"
            "- –ú–µ—Ö–∞–Ω–∏–∫–∏ (–æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤, —Ä–µ—Å—É—Ä—Å—ã, –ø–æ–±–µ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ —Ç.–¥.)\n"
            "- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∏–∑–∞–π–Ω–∞\n\n"
            "–ß–∞—Ç:\n" + history[-8000:]  # HF API –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        )

        analysis = await ask_qwen(prompt, max_new_tokens=1500)
        await thinking.edit_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")

        for i in range(0, len(analysis), 4000):
            await message.reply(analysis[i:i+4000])

    except Exception as e:
        await thinking.edit_text(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)[:300]}")

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    print("üöÄ Qwen-–ø–∞—Ä—Ç–Ω—ë—Ä –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)
